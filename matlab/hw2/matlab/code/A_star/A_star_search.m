function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
%pre-process the grid map, add offset
size_map = size(map,1);
Y_offset = 0;
X_offset = 0;

%Define the 2D grid map array.
%Obstacle=-1, Target = 0, Start=1
MAP=2*(ones(MAX_X,MAX_Y));

%Initialize MAP with location of the target
xval=floor(map(size_map, 1)) + X_offset;
yval=floor(map(size_map, 2)) + Y_offset;
xTarget=xval;
yTarget=yval;
MAP(xval,yval)=0;

%Initialize MAP with location of the obstacle
for i = 2: size_map-1
    xval=floor(map(i, 1)) + X_offset;
    yval=floor(map(i, 2)) + Y_offset;
    MAP(xval,yval)=-1;
end

%Initialize MAP with location of the start point
xval=floor(map(1, 1)) + X_offset;
yval=floor(map(1, 2)) + Y_offset;
xStart=xval;
yStart=yval;
MAP(xval,yval)=1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%LISTS USED FOR ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%OPEN LIST STRUCTURE
%--------------------------------------------------------------------------
%IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
%--------------------------------------------------------------------------
OPEN=[];
%CLOSED LIST STRUCTURE
%--------------
%X val | Y val |
%--------------
% CLOSED=zeros(MAX_VAL,2);
CLOSED=[];

%Put all obstacles on the Closed list
k=1;%Dummy counter
for i=1:MAX_X
    for j=1:MAX_Y
        if(MAP(i,j) == -1)
            CLOSED(k,1)=i;
            CLOSED(k,2)=j;
            k=k+1;
        end
    end
end
CLOSED_COUNT=size(CLOSED,1);
%set the starting node as the first node
xNode=xval;
yNode=yval;
OPEN_COUNT=1;
goal_distance=distance(xNode,yNode,xTarget,yTarget);
path_cost=0;
OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);
OPEN(OPEN_COUNT,1)=1;
CLOSED_COUNT=CLOSED_COUNT+1;
CLOSED(CLOSED_COUNT,1)=xNode;
CLOSED(CLOSED_COUNT,2)=yNode;
NoPath=1;
MIN=0;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
isFindTarget = 1;
k = 2;
while(isFindTarget) %you have to dicide the Conditions for while loop exit
    if size(MAP,1) == 1 && size(MAP,2) == 1
        break;
    end
    
    if(xNode == xTarget && yNode == yTarget)
        
        isFindTarget = 0;
        fprintf("Find Target node !\n");
        break;
    end
    
    exp_array = expand_array(xNode,yNode,path_cost,xTarget,yTarget,CLOSED,MAX_X,MAX_Y);
    [m,n] = size(exp_array);
    
    MIN = 1e10;
    for i=1:m
        index =  node_index(OPEN,exp_array(i,1),exp_array(i,2));
        if index > OPEN_COUNT
            OPEN_COUNT = OPEN_COUNT + 1;
            OPEN(OPEN_COUNT,:)=insert_open(exp_array(i,1),exp_array(i,2),xNode,yNode,exp_array(i,3),exp_array(i,4),exp_array(i,5));
            OPEN(OPEN_COUNT,1)=0;
        else
            if OPEN(index,7) > exp_array(i,4)
                OPEN(index,4) = xNode;
                OPEN(index,5) = yNode;
                OPEN(index,7) = exp_array(i,4);
                OPEN(index,8) = exp_array(i,5);
            end
        end
            
    end
    
    for i=1:size(OPEN(:,1))
        if(OPEN(i,1) == 0)
            if MIN > OPEN(i,8)
                MIN = OPEN(i,8);
                xNode = OPEN(i,2);
                yNode = OPEN(i,3);
            end
        end
    end
    
    index = node_index(OPEN,xNode,yNode);
    path_cost = OPEN(index,7);
    OPEN(index,1) = 1;
    %
    %finish the while loop
    %
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    
end %End of While Loop

%Once algorithm has run The optimal path is generated by starting of at the
%last node(if it is the target node) and then identifying its parent node
%until it reaches the start node.This is the optimal path

%
%How to get the optimal path after A_star search?
%please finish it
%

path = [];
count = 1;
path_end_x = xNode;     %将Target节点存入path
path_end_y = yNode;
%从target节点开始依次地寻找当前节点的parent，直到找到start节点为止
while(path_end_x ~= xStart || path_end_y ~= yStart)
    path(count,:)= [path_end_x,path_end_y];     %将当前点存入path中
    count = count + 1;
    current_index = node_index(OPEN,path_end_x,path_end_y);
    path_end_x = OPEN(current_index,4);     %找到当前节点的parent坐标
    path_end_y = OPEN(current_index,5);
end
path(count,:) = [xStart,yStart];	%将Start节点存入path
% /path(count,:) = [xStart,yStart];	%将Start节点存入path

end
